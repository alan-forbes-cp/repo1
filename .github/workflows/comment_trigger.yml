name: PR internal-test-request comment trigger
run-name: PR internal-test-request ("${{ github.event.issue.title }}", @${{ github.event.comment.user.login }}, ${{ github.event.comment.created_at }})

on:
  issue_comment:
    # "Every pull request is an issue, but not every issue is a pull request."
    # - limit to PRs only in 'jobs:if:' below
    types:
      - created # new comments only - no edits or deletions
  
jobs:
  pr_internal_test_request_trigger_check:
    # Checks for:
    # * new comments (See 'issue_comment:types:' above)
    # * PR comments (Issue comments are skipped - also see 'issue_comment:' above)
    # * comments with '/trigger_string' format
    # * comments from specific user(s)
    # * comments with a specific trigger string (i.e. comment-body content e.g. "/verify")
    # * open PRs
    # Requires:
    # * Github's 'gh' command line tool must be available on runner
    name: PR i-t-r trigger check
    if: ${{ github.event.issue.pull_request && startsWith(github.event.comment.body, '/') && ( ! contains(github.event.comment.body, ' ') ) && ( ! contains(toJson(github.event.comment.body), '\r\n') ) && ( ! endsWith(github.event.comment.body, '/') ) }}
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      run_processing: ${{ steps.CHECKER.outputs.run_processing }}
    steps:
      - name: Obtain internal test list
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          sparse-checkout: |
            .github/workflows/internal_test_list
          sparse-checkout-cone-mode: false
          ref: master
      - name: Check trigger
        id: CHECKER
        run: |
          echo "BASE REF"
          gh pr view $PR_NUMBER --repo $GH_REPO --json baseRefName | jq -r '.baseRefName'
          echo "Checking trigger ..."
          FLAG="NO"
          if ! grep -Fq "/$PR_USER/$PR_BODY" "$PR_LIST" ; then
            echo "PR user trigger check failed ... processing will be skipped"
          else
            STATE=$(gh pr view $PR_NUMBER --repo $GH_REPO --json state --jq .state)
            if [ "$STATE" != "OPEN" ]; then
              echo "PR is not open .. processing will be skipped"
            else
              FLAG="YES"
              echo "Trigger check OK ... processing will run"
            fi
          fi
          echo "run_processing=$FLAG" >> $GITHUB_OUTPUT
        env:
          PR_USER: ${{ github.event.comment.user.login }}
          PR_BODY: ${{ github.event.comment.body }}
          PR_LIST: .github/workflows/internal_test_list
          PR_NUMBER: ${{ github.event.issue.number }}
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}

  pr_internal_test_request_processing:
    # Creates new PR comment with 'internal-test-request data' body:
    # * comment trigger string
    # * PR repo ref
    # * requester @name
    # * request status string
    # Requires:
    # * Github's 'gh' command line tool must be available on runner
    name: PR i-t-r processing
    needs: pr_internal_test_request_trigger_check
    if: ${{ github.event.issue.pull_request && ( needs.pr_internal_test_request_trigger_check.outputs.run_processing == 'YES' ) }}
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Obtain PR repo ref
        id: PR_REF
        run: |
          echo "pr_ref=$(gh pr view $PR_NUMBER --repo $GH_REPO --json headRefOid | jq -r '.headRefOid')" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT
        env:
          PR_NUMBER: ${{ github.event.issue.number }}
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}
      - name: Add PR comment with i-t-r data
        run: |
          gh pr comment "$PR_NUMBER" --body "$PR_BODY"
        env:
          PR_NUMBER: ${{ github.event.issue.number }}
          PR_BODY: >
            ${{ github.event.comment.body }}
            ${{ steps.PR_REF.outputs.pr_ref }}
            @${{ github.event.comment.user.login }}
            **Codeplay Internal Testing: Request Validated**
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}
